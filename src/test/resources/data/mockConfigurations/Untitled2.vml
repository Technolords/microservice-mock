<?xml version="1.0" encoding="UTF-8"?>
<vxml xmlns="http://www.w3.org/2001/vxml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2001/vxml
http://www.altova.com/schemas/voicexml/vxml.xsd" version="">
	<catch/>
</vxml>
package net.technolords.micro.processor;


import org.apache.camel.Exchange;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.DefaultExchange;
import org.codehaus.plexus.util.FileUtils;
import org.testng.annotations.DataProvider;
import org.xml.sax.SAXException;
import net.technolords.micro.config.ConfigurationManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.Test;

import javax.xml.bind.JAXBException;
import javax.xml.soap.SAAJResult;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

import static org.testng.Assert.assertEquals;

public class ResponseProcessorTest {
    private final Logger LOGGER = LoggerFactory.getLogger(getClass());

//    private static final String PATH_TO_CONFIG_FILE = "src/test/resources/xml/configuration-test1.xml";
    private static final String PATH_TO_CONFIG_FILE = "D:/commit2Learn/data/mockConfigurations/configuration-test1.xml";
    private static final String PATH_TO_REQUEST = "D:/commit2Learn/data/mockRequests/";
    private static final String PATH_TO_RESPONSE = "D:/commit2Learn/data/mockResponses/";

    String pathToConfig = PATH_TO_CONFIG_FILE;
    String pathToRequest = PATH_TO_REQUEST;
    String pathToResponse = PATH_TO_RESPONSE;

    Path configPath, requestPath, responsePath;
    InputStream inputStreamForConfig, inputStreamForResponse, inputStreamForRequest;

    @DataProvider(name = "dataSetMockExpectation")
    public Object[][] dataSetMock(){
        return new Object[][] {
                {"sample-post1-request.xml", "sample-post1.txt"}
        };
    }

    @Test(dataProvider = "dataSetMockExpectation")
    public void testPostResponses(String request, String expectedResponse) throws Exception {

//        String expectedResponse = "{\n" +
//                "  \"label \" : \"post-request1\",\n" +
//                "  \"data\" : \"this is also fun\"\n" +
//                "}";

//        configPath = FileSystems.getDefault().getPath(pathToConfig);
        requestPath = FileSystems.getDefault().getPath(PATH_TO_REQUEST + File.separator + request);
        LOGGER.info("Request File exist: {}", Files.exists(requestPath));
        responsePath = FileSystems.getDefault().getPath(PATH_TO_RESPONSE + File.separator + expectedResponse);
        LOGGER.info("Response File exist: {}", Files.exists(responsePath));

//        inputStreamForConfig = Files.newInputStream(configPath, StandardOpenOption.READ);
//        Path pathToResourceLocation = FileSystems.getDefault().getPath(getPathToClassFolder() + File.separator + fileName);
        ///
//        inputStreamForRequest = Files.newInputStream(requestPath, StandardOpenOption.READ);
//        inputStreamForResponse = Files.newInputStream(responsePath, StandardOpenOption.READ);


        ConfigurationManager configurationManager = new ConfigurationManager(pathToConfig, null);

        Exchange exchange = new DefaultExchange(new DefaultCamelContext());
        exchange.getIn().setHeader(Exchange.HTTP_METHOD,"POST");
        exchange.getIn().setHeader(Exchange.HTTP_URI, "/mock/post");
        exchange.getIn().setBody(request);

        ResponseProcessor responseProcessor = new ResponseProcessor(configurationManager);

        responseProcessor.process(exchange);

        //Assertions
        String actualResponse = exchange.getIn().getBody(String.class);
        assertEquals(actualResponse,expectedResponse);


    }


}